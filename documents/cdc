cahier des charges du projet :

I/ Contexte et définition de l’application à réaliser:

Notre projet consiste en la réalisation d’une application permettant de jouer à un portage numérique d’un jeu de plateau”CATANE”. Notre application devra permettre au joueurs de suivre de la manière la plus proche possible les différentes règles stratégies et aspects du jeu originelle. L’application devra intégrer un interface graphique permettant aux joueurs d'interagir tout au long de la partie sans aucuns prérequis pour sa compréhension .
Sur l’écran de jeu les joueurs devront pouvoir avoir accès aux mêmes informations que lors d’une partie sur le jeu physique. Il ne devra pas être possible pour un joueur d’effectuer une action interdit par les règles du jeu et des aides devront être disponible pour faciliter la compréhension de ces règles.
Le développement de cette application a été motivé par plusieurs idées, nous souhaitons que notre application permette de faire découvrir à des joueurs ce jeu sans nécessiter d'acheter la version physique qu’elle permettent d’aider un joueur débutant à comprendre les règles, et dans sa finalité permettre à des joueur distant géographiquement de se retrouver pour jouer au CATANE. Le choix de ce projet a aussi été motivé par des notions de complexités en effet après quelques recherche et d’après les connaissances acquises durant le semestre 6 en langage c avancée il nous semble qu’un telle projet soit accessible à notre niveau tout en présentant quelques difficultés que nous devrons relever.


II/Objectifs des différentes versions:

V0:

Cette première version est plus une étape commune au groupe pour poser les bases du projet et bien clarifier les objectifs afin de gagner du temps par la suite. Cela concerne les outils utilisés, la gestion du temps et surtout la reflexion collective sur le but du projet.
Voici les points clés de cette première étape :

- création du repository git afin de gérer simultanément le stockage des documents et du code

- création du cahier des charges, afin de poser les bases des objectifs de chacun sur le projet global

- création du diagramme de gantt prévisionnel du projet, pour gérer le temps imparti à la réalisation du travail

- réalisation d'un schéma bloc fonctionnel, pour représenter le squelette du code à réaliser, qui permettra a chaque membre du groupe d'avoir les informations de base sur l'ensemble du code de l'ensemble du groupe (fonctions, structures, modèle MVC)

- prise en main de la librairie retenue pour le projet : SDL2, particulièrement utile pour la vue et le controleur

- (optionnel) première implémentation des structures (Joueur, Plateau, Tuile)


V1:

Cette version à pour principal but le codage de la majeure partie du projet catane.

- implémentation finale de toutes les structures du jeu

- codage de l'ensemble des fonctions de chaque partie :
	fonctions du modèle manipulant les différentes structures du modèle
	fonctions du controleur pour gérer les actions du client
	fonctions de la vue afin d'afficher l'état actuel de la partie au joueur

- vérifications et tests du code, en utilisant notamment CMocka et gcov

- mise en commun du travail (merge) et résolutions des problèmes via les outils de git


V2:

Cette version doit présenter un jeu jouable sur une seule machine selon le respect d'un grand nombre de règles initiales du jeu (sans échanges entre joueurs). Le jeu doit se jouer en tour par tour.

- implémentation du main afin de programmer le tour par tour et l'utilisation des fonctions précédement implémentées

- création d'une "page d'accueil" pour enregistrer quelques informations sur les joueurs (principalement pseudo) et lancement de la partie

- vérifications, tests et mise en commun du travail

-résolutions des problèmes et proposition d'une première version jouable sur une machine

V3:

Cette version est une version optionnelle, qui propose des améliorations au projet si le temps le permet.
 
- Permettre aux joueurs de jouer sur plusieurs machines à la fois (une par joueur) avec un jeu hébergé sur une machine. Cette version de jeu "en réseau" s'appuiera sur l'échange de sockets entre les machines "joueurs" et la machine "hébergeur" et vice versa.

- Ajouter une option d’échange de ressources entre les joueurs, (uniquement en cas de jeu en réseau) afin de coller un peu plus au jeu originel

- ajout de différents "styles" de graphismes pour le plateau (futuriste, aquatique etc)

- vérifications, tests et mise en commun du travail

-résolution des problèmes et proposition d'une seconde version jouable sur plusieurs machines


III/Modèle Vue Contrôleur :


	Modèle : Le modèle accueille les structures du jeu, afin de stocker toutes les informations nécéssaires de chaque joueur et du plateau.

	- type Infrastructure : ville, colonie, route, vide

	- type Ressource : blé, pierre, argile, mouton, bois

	- type Developpement : cavalier, etc (cartes developpement)

	- structure Sommet : associe un type d'Infrastructure à un joueur

	- structure Arrete : associe un type d'Infrastructure (route) et un joueur


	- structure Tuile :
		Type de tuile (Ressource)
		Tableau de ses sommets
		Tableau de ses arretes
		présence du brigand (entier à 0 ou 1)
		Probabilité de tirage de la Tuile (entier)
		
	- structure Noeud :
		une tuile
		un tableau de tuiles adjacentes
	
	- liste Plateau :
		liste des noeuds
		
	- structure Joueur :
		liste/tableau de ressources
		liste/tableau de developpements
		pseudo (char)
		couleur (?)
		score (int)

	- listes de cartes (Piles) à dépiler (pioches) pour les developpements et ressources

	Le modele accueille également des fonctions travaillant sur ces structures et informations de la partie.

	- fonctions de construction sur le plateau
	- fonction de lancé de dé
	- fonctions de gain de ressources pour les joueurs
	- fonctions d'initialisation du plateau et des joueurs
	- fonctions d'initialisation des piles de cartes
	- fonctions de comptage de points
	- (optionel) fonctions d'échange de cartes
	
		
	Contrôleur :
	
	- fonction controller_turn pour que le joueur décide quoi faire lors de son tour
	- fonction quit fonction de callback qui quitte le jeu
	- fonction end_turn_event fonction de callback qui met fin au tour
	- fonction draw_dev_card fonction de callback qui fait piocher une carte développement
	- fonction use_dev_card_event fonction de callback qui fait utiliser une carte developpement

	- fonction controller_set_road pour que le joueur place une route
	- fonction set_road_event fonction de callback qui place la route
	- fonction back_event fonction de callback qui fait revenir en arrière (réutilisée pour set_settlement et set_city)

	- fonction controller_set_settlement pour que le joueur place une colonie
	- fonction set_settlement_event fonction de callback qui place la colonie

	- fonction controller_set_city pour que le joueur place une ville (pratiquement la même fonction ou la même?)
	- fonction set_city_event fonction de callback qui place la ville

	- fonction controller_choose_resource pour que le joueur decide de la ressource de la carte developpement monopole ou de la carte developpement invention
	- fonction monopoly_event fonction de callback qui modifie ensuite l'état du jeu pour la carte monopole
	- fonction invention_event fonction de callback qui modifie l'état du jeu pour la carte invention

	- fonction controller_choose_player pour que le joueur decide du joueur adverse lors de la carte chevalier
	- fonction knight_event fonction de callback qui modifie l'état du jeu pour la carte chevalier

	- fonction controller_set_thief pour que le joueur décide de la tuile où placer le voleur
	- fonction set_thief_event fonction de callback qui place le voleur

	- fonction controller_main_menu pour que le joueur agisse sur le menu démarrer
	- fonction launch_game_event fonction de callback qui lance la partie


	Vue:

	- fonction Tuile pour afficher les tuiles du plateau de jeu 
	- fonction Plateau pour afficher le plateau fixe (avec ports)
	- fonction Proba pour afficher les chiffre affecté aux tuiles
	- fonction Carte pour afficher les cartes ressources et leur nombre
	- fonction Architecture pour afficher les constructions en menu déroulant et les 	   ressources nécessaires pour les faires 
	- fonction CarteDeveloppement pour afficher les cartes développement en notre  		  possession en menu déroulant
	- fonction Joueurs pour afficher les scores des différents joueurs
	- fonction Reussite pour afficher les cartes “plus grande route” et/ou “plus grande    		  armée”
	- fonction Regle pour afficher le point d’interrogation pour avoir les règles du jeu
	- fonction Des pour afficher les dés
	- fonction Skip pour afficher un bouton pour finir son tour
	- fonction Menu pour afficher le menu démarrer du jeu avec "boutons" jouer 		  (déroulement sur nombre de joueurs), instructions et crédit.






